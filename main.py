#          ‚ñà  ‚ñà ‚ñà‚ñÑ ‚ñà ‚ñà‚ñÑ ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ ‚ñà
#          ‚ñÄ‚ñÑ‚ñÑ‚ñÄ ‚ñà ‚ñÄ‚ñà ‚ñà ‚ñÄ‚ñà ‚ñà‚ñà‚ñÑ  ‚ñà  ‚ñà‚ñÑ‚ñà ‚ñà ‚ñÄ‚ñà ‚ñÑ
#                ¬© Copyright 2024
#
#            üë§ https://t.me/unneyon
#
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

import asyncio
import logging
import os; os.system("clear")
if not os.path.exists('config.json'):
	exit("\033[31m–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª\033[0m \033[36mconfig.json\033[31m!\033[0m")
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import pyrogram
import pyrogram_patch
from pyrogram_patch.fsm.storages import MemoryStorage

import utils; utils.checkConfig()
from commands import routers
from loader import client, patch
from utils import middlewares

logging.basicConfig(
	level=logging.INFO,
	format='[%(asctime)s] [%(levelname)s] [%(name)s.%(funcName)s:%(lineno)d]\n>>> %(message)s\n',
	filename='logs.log',
	filemode='w+'
)

patch.include_middleware(middlewares.RegUser())

utils.init_db()
utils.printMe()
print("\033[36m–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–æ—É—Ç–µ—Ä–∞–º:\033[0m")
for router in routers:
	if utils.config['commands'][router.name]:
		patch.include_router(router)
		print(f"\033[32m  ‚Ä¢ –†–æ—É—Ç–µ—Ä [{router.name}] —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\033[0m")
		continue
	print(f"\033[31m  ‚Ä¢ –†–æ—É—Ç–µ—Ä [{router.name}] –æ—Ç–∫–ª—é—á–µ–Ω.\033[0m")


scheduler = AsyncIOScheduler()
scheduler.add_job(utils.sendBackup, "interval", seconds=3600)

print(f"\033[36m–ë–æ—Ç [Spoilers Bot v{utils.config['version']}] —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\033[0m")
patch.set_storage(MemoryStorage())
scheduler.start()
client.run()